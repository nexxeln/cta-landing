---
import Footer from "../Footer/Footer.astro";
import MoreMenu from "../RightSidebar/MoreMenu.astro";
import TableOfContents from "../RightSidebar/TableOfContents";
import { getLanguageFromURL } from "../../languages";
import { SIDEBAR } from "../../config";
const { content, githubEditUrl, currentFile, currentPage } = Astro.props;
const title = content.title;
const headings = content.astro.headings;
const currentPageMatch = currentPage.slice(1);
const langCode = getLanguageFromURL(currentPage);
const sidebarSections = SIDEBAR[langCode].reduce((col, item, i) => {
  // If the first item is not a section header, create a new container section.
  if (i === 0) {
    if (!item.header) {
      const pesudoSection = { text: "" };
      col.push({ ...pesudoSection, children: [] });
    }
  }
  if (item.header) {
    col.push({ ...item, children: [] });
  } else {
    col[col.length - 1]?.children.push(item);
  }
  return col;
}, []);

const thisCategory = sidebarSections.findIndex((section) =>
  section?.children.some((child) => child?.link === currentPageMatch)
);
const thisCategoryObject = sidebarSections[thisCategory];
const thisPage = sidebarSections[thisCategory]?.children?.findIndex(
  (child) => child?.link === currentPageMatch
);
let prevPage = sidebarSections[thisCategory]?.children[thisPage - 1];
let nextPage = sidebarSections[thisCategory]?.children[thisPage + 1];
const prevCategory = thisCategory - 1;
const prevCategoryObject = sidebarSections[prevCategory];
const nextCategory = thisCategory + 1;
const nextCategoryObject = sidebarSections[nextCategory];

if (prevPage === undefined) {
  const prevCategoryPage =
    sidebarSections[prevCategory]?.children[
      sidebarSections[prevCategory]?.children.length - 1
    ];
  prevPage = {
    ...prevCategoryPage,
    link: prevCategoryPage?.link?.replace(/^\//, ""),
  };
}
if (nextPage === undefined) {
  const nextCategoryPage = sidebarSections[nextCategory]?.children[0];
  nextPage = {
    ...nextCategoryPage,
    link: nextCategoryPage?.link?.replace(/^\//, ""),
  };
}
let prevPageLink = prevPage?.link?.replace(/^\//, "");
let nextPageLink = nextPage?.link?.replace(/^\//, "");
// skip external docs links
if (nextPageLink && nextPageLink.startsWith("https://")) {
  nextPage = sidebarSections[nextCategory]?.children?.[1];
  if (nextPage) {
    nextPageLink = nextPage?.link.split("/").pop();
  }
}
if (prevPageLink && prevPageLink.startsWith("https://")) {
  prevPage = sidebarSections[prevCategory]?.children?.pop();
  if (prevPage) {
    prevPageLink = prevPage?.link.split("/").pop();
  }
}
console.log(thisCategory, prevCategory);
---

<div
  class="px-4 w-full h-full flex  flex-col items-start justify-between col-span-2 col-start-2"
>
  <div class="w-full">
    <h1 class="text-4xl font-semibold pb-6" id="overview">{title}</h1>
    <section class="mb-2 block sm:hidden">
      <nav class="">
        <TableOfContents {headings} />
      </nav>
    </section>
    <article class="markdown px-6 max-w-none ">
      <slot />
    </article>

    <div
      class={prevPageLink
        ? `justify-between flex items-center mx-3 py-16 sm:py-32`
        : `justify-end flex items-center mx-3`}
    >
      {prevPageLink && (
        <a
          href={`/${prevPage?.link}`}
          class="dark:text-brand-primary text-slate-800 flex flex-col border border-slate-800 dark:border-brand-primary px-2 sm:px-4 py-1 rounded-lg w-fit hover:bg-brand-primary hover:text-slate-800 hover:dark:text-slate-800 sm:min-w-[150px]"
        >
          {thisPage !== 1 &&
          thisCategory !== 0 &&
          thisCategory !== 1 &&
          thisCategoryObject?.text ? (
            <div class="flex items-center justify-end">
              <span class="text-xs sm:text-sm font-medium">
                {thisCategoryObject?.text}
              </span>
            </div>
          ) : prevCategoryObject?.text ? (
            <div class="flex items-center justify-end">
              <span class="text-xs sm:text-sm font-medium">
                {prevCategoryObject?.text}
              </span>
            </div>
          ) : (
            <div class="flex items-center justify-end">
              <span class="text-xs sm:text-sm font-medium">
                {thisCategoryObject?.text}
              </span>
            </div>
          )}
          <div class="w-full flex items-center justify-end pt-1.5">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                clip-rule="evenodd"
              />
            </svg>
            <span class="text-sm sm:text-base ">{prevPage?.text}</span>
          </div>
        </a>
      )}
      {nextPageLink && (
        <a
          href={`/${nextPage?.link}`}
          class="dark:text-brand-primary text-slate-800 flex flex-col border border-slate-800 dark:border-brand-primary px-2 sm:px-4 py-1 rounded-lg w-fit hover:bg-brand-primary hover:text-slate-800 hover:dark:text-slate-800 sm:min-w-[150px]"
        >
          {thisCategoryObject?.children.length - 1 <= thisPage ? (
            <div class="flex items-center justify-start ">
              <span class="text-xs sm:text-sm font-medium">
                {nextCategoryObject?.text}
              </span>
            </div>
          ) : (
            <div class="flex items-center justify-start">
              <span class="text-xs sm:text-sm font-medium">
                {thisCategoryObject?.text}
              </span>
            </div>
          )}
          <div class="flex w-full items-center justify-start pt-1.5">
            <span class="text-sm sm:text-base">{nextPage?.text}</span>
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
        </a>
      )}
    </div>

    <nav class="block lg:hidden">
      <MoreMenu editHref={githubEditUrl} />
    </nav>
  </div>
  <div class="w-full mx-auto pt-48">
    <Footer client:load path={currentFile} />
  </div>
</div>

<script>
  const copySVG = `<svg
    stroke="currentColor"
    fill="none"
    strokeWidth={0}
    viewBox="0 0 24 24"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M8 5H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1M8 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M8 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m0 0h2a2 2 0 0 1 2 2v3m2 4H10m0 0 3-3m-3 3 3 3"
    />
  </svg>`;

  let blocks = document.querySelectorAll("pre");
  blocks.forEach((block) => {
    block.className = "relative w-full";
    let copyButton = document.createElement("button");
    copyButton.className =
      "absolute right-1 top-1 border border-slate-50 rounded-lg px-2 py-1 text-sm hover:text-slate-800 hover:bg-gray-100 focus:outline-none focus:shadow-outline text-brand-primary";
    copyButton.innerHTML = copySVG;
    copyButton.addEventListener("click", () => {
      const pre = copyButton.parentElement;
      let code = pre.querySelector("code");
      let text = code.innerText;
      navigator.clipboard.writeText(text);
      copyButton.innerHTML = `<svg
    stroke="currentColor"
    fill="currentColor"
    strokeWidth={0}
    viewBox="0 0 1024 1024"
    height="1.3em"
    width="1.3em"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      d="M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0 0 51.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"
      stroke="none"
    />
    <path
      d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"
      stroke="none"
    />
  </svg>`;
      setTimeout(() => {
        copyButton.innerHTML = copySVG;
      }, 1000);
    });
    block.appendChild(copyButton);
  });
</script>
